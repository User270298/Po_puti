from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


def keyboards_main_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—Éüöò", callback_data="publish_trip")],
                         [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏üìã", callback_data="search_trips")],

                         ])
    return keyboard

#
def keyboards_driver(user_id, trip_id):
    button_text = "–•–æ—á—É –ø–æ–µ—Ö–∞—Ç—å"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=button_text, callback_data=f"book_trip:{user_id}:{trip_id}")]
        ]
    )
    return keyboard


def description_choice_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="description_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="description_no")]
        ]
    )
    return keyboard


def skip_description_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_description")]
        ]
    )
    return keyboard


def quick_routes_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π ‚Üí –¶–µ–Ω—Ç—Ä", callback_data="quick_route:suvorovskiy:center")],
            [InlineKeyboardButton(text="üè¢ –¶–µ–Ω—Ç—Ä ‚Üí –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π", callback_data="quick_route:center:suvorovskiy")],
            [InlineKeyboardButton(text="üöÇ –†–æ—Å—Ç–æ–≤ –ì–ª–∞–≤–Ω—ã–π ‚Üí –¶–µ–Ω—Ç—Ä", callback_data="quick_route:station:center")],
            [InlineKeyboardButton(text="üìù –°–≤–æ–π –º–∞—Ä—à—Ä—É—Ç", callback_data="custom_route")]
        ]
    )
    return keyboard


def quick_time_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    from datetime import datetime, timedelta
    import logging
    
    logger = logging.getLogger(__name__)
    
    now = datetime.now()
    current_hour = now.hour
    current_minute = now.minute
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 15 –º–∏–Ω—É—Ç
    rounded_minute = (current_minute // 15) * 15
    if rounded_minute == 0:
        rounded_minute = 60
        current_hour += 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    time_options = []
    
    # –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    time_30min = now + timedelta(minutes=30)
    time_30min_str = time_30min.strftime('%H:%M')
    time_options.append(f"‚è∞ –ß–µ—Ä–µ–∑ 30 –º–∏–Ω ({time_30min_str})")
    
    # –ß–µ—Ä–µ–∑ —á–∞—Å
    time_1hour = now + timedelta(hours=1)
    time_1hour_str = time_1hour.strftime('%H:%M')
    time_options.append(f"‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å ({time_1hour_str})")
    
    # –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞
    time_2hour = now + timedelta(hours=2)
    time_2hour_str = time_2hour.strftime('%H:%M')
    time_options.append(f"‚è∞ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ ({time_2hour_str})")
    
    # –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≤ 7:00
    tomorrow_morning = (now + timedelta(days=1)).replace(hour=7, minute=0)
    tomorrow_morning_str = tomorrow_morning.strftime('%H:%M')
    time_options.append(f"üåÖ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –≤ 7:00")
    
    # –õ–æ–≥–∏—Ä—É–µ–º callback_data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Generated callback_data: quick_time:{time_30min_str}, quick_time:{time_1hour_str}, quick_time:{time_2hour_str}, quick_time:{tomorrow_morning_str}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    logger.info(f"Time strings: {time_30min_str}, {time_1hour_str}, {time_2hour_str}, {tomorrow_morning_str}")
    logger.info(f"Time strings types: {type(time_30min_str)}, {type(time_1hour_str)}, {type(time_2hour_str)}, {type(tomorrow_morning_str)}")
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=time_options[0], callback_data=f"quick_time:{time_30min_str}")],
            [InlineKeyboardButton(text=time_options[1], callback_data=f"quick_time:{time_1hour_str}")],
            [InlineKeyboardButton(text=time_options[2], callback_data=f"quick_time:{time_2hour_str}")],
            [InlineKeyboardButton(text=time_options[3], callback_data=f"quick_time:{tomorrow_morning_str}")],
            [InlineKeyboardButton(text="üìù –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="custom_time")]
        ]
    )
    return keyboard
