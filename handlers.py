import datetime
import os
import logging
from aiogram import types, F, Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from crud import get_user_trips, register_user, create_trip, User, get_last_trip, create_trip, get_users_who_booked_trip, book_trip_in_db
from keyboards import keyboards_main_menu, keyboards_driver, description_choice_keyboard, skip_description_keyboard, quick_routes_keyboard, quick_time_keyboard
from database import SessionLocal
from models import Trip
from aiogram.types import ChatMemberUpdated
from aiogram.filters import ChatMemberUpdatedFilter
from datetime import datetime, timedelta
import asyncio
import pytz



load_dotenv()
router = Router()

GROUP_ID = os.getenv("GROUP_ID")  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
GROUP_ID_ALL = os.getenv("GROUP_ID_ALL")
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

from functools import wraps


def db_session(func):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """

    @wraps(func)
    async def wrapper(*args, **kwargs):
        with SessionLocal() as session:
            kwargs['session'] = session
            return await func(*args, **kwargs)

    return wrapper


class Registration(StatesGroup):
    phone = State()
    

class Trips(StatesGroup):
    origin = State()
    destination = State()
    departure_time = State()
    description = State()


# @router.chat_member(ChatMemberUpdatedFilter)
# async def handle_system_messages(update: ChatMemberUpdated, bot: Bot):
#     """
#     –£–¥–∞–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
#     """
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç—É–ø–∏–ª –∏–ª–∏ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
#         if update.new_chat_member.status in ["member"] or update.old_chat_member.status in ["left"]:
#             print(f"–£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {update.chat.title}")
#             await bot.delete_message(chat_id=update.chat.id, message_id=update.message_id)
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# @router.message(Command(commands=["start"]))
# async def start(message: types.Message):
#     from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
#     # –ö–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url="https://t.me/num_po_puti_bot")]
#         ]
#     )
#     promo_message = (
#             "üöó *–ò—â–µ—à—å –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É?*\n\n"
#             "üëã –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å *Telegram-–±–æ—Ç*! –ü—É–±–ª–∏–∫—É–π –º–∞—Ä—à—Ä—É—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n\n"
#             "‚úÖ –ü–æ–µ–∑–¥–∫–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —Ä–∞–π–æ–Ω–∞–º–∏\n"
#             "‚úÖ –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
#             "‚úÖ –ë–æ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –±–æ–ª—å—à–µ –ª—é–¥–µ–π\n\n"
#             "üöÄ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞!"
#         )
# #     promo_message=('''üöó –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤? –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É!
# # üëã –¢—ã —É–∂–µ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–æ–π ¬´–ù–∞–º –ø–æ –ø—É—Ç–∏¬ª –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ c –°—É–≤–æ—Ä–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ? –û—Ç–ª–∏—á–Ω–æ!

# # üîπ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É ‚Äî ¬´–ù–∞–º –ø–æ –ø—É—Ç–∏ | –í—Å–µ —Ä–∞–π–æ–Ω—ã¬ª!
# # ‚úÖ –ë–æ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ‚Äî –Ω–µ —Ç–æ–ª—å–∫–æ –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π, –Ω–æ –∏ –ª—é–±—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# # ‚úÖ –ï—â–µ –±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ ‚Äî –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞
# # ‚úÖ –ì–∏–±–∫–æ—Å—Ç—å ‚Äî –ø–æ–µ–∑–¥–∫–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —Ä–∞–π–æ–Ω–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
# # ‚úÖ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
# # üëâ –ü–µ—Ä–µ—Ö–æ–¥–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @num_po_puti

# # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Å–µ–±—è –æ–¥–Ω–∏–º —Ä–∞–π–æ–Ω–æ–º ‚Äî –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–π –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É –¥–µ—à–µ–≤–æ –∏ —É–¥–æ–±–Ω–æ!''')
#     # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#     await message.answer(
#         text=promo_message,
#         parse_mode="Markdown",
#         reply_markup=keyboard
#     )


# # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command(commands=["start"]))
@db_session
async def start_command(message: types.Message, state: FSMContext, session):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    logger.info(f"Received /start command from user {message.from_user.id}")
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()

    if user:
        logger.info(f"User {message.from_user.id} found in database")
        await message.answer("*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!*\n\nüöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                             parse_mode="Markdown", reply_markup=keyboards_main_menu())
    else:
        logger.info(f"User {message.from_user.id} not found in database, starting registration")
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
        
        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            "*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ù–∞–º –ø–æ –ø—É—Ç–∏ –ë–æ—Ç!*\n\n"
            "ü§ñüöò –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –ø–æ–µ–∑–¥–∫–∏.\n\n"
            "üì± *–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await state.set_state(Registration.phone)


@router.message(StateFilter(Registration.phone))
@db_session
async def process_phone(message: types.Message, state: FSMContext, session):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç
    if not message.contact:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'")
        return
    
    phone_number = message.contact.phone_number
    user_name = message.contact.first_name or message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"User {message.from_user.id} sent phone: {phone_number}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register_user(
        session, 
        telegram_id=message.from_user.id, 
        name=user_name, 
        email="", 
        phone=phone_number
    )
    
    logger.info(f"User {message.from_user.id} successfully registered")
    
    # –£–±–∏—Ä–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    from aiogram.types import ReplyKeyboardRemove
    
    await message.answer(
        "üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫–∏ –∏ –∏—Å–∫–∞—Ç—å –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.",
        parse_mode="Markdown", 
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer("üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards_main_menu())
    await state.clear()





# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–µ–∑–¥–∫–∏
@router.callback_query(F.data == "publish_trip")
async def create_trip_command(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    logger.info(f"User {callback.message.from_user.id} initiated trip creation")
    await callback.message.answer(
        "üöó *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π:",
        parse_mode="Markdown",
        reply_markup=quick_routes_keyboard()
    )


@router.callback_query(F.data.startswith("quick_route:"))
async def quick_route_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    route_data = callback.data.split(":")
    origin_key, destination_key = route_data[1], route_data[2]
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    route_names = {
        "suvorovskiy": "–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω",
        "center": "–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞",
        "station": "–†–æ—Å—Ç–æ–≤ –ì–ª–∞–≤–Ω—ã–π"
    }
    
    origin = route_names.get(origin_key, origin_key)
    destination = route_names.get(destination_key, destination_key)
    
    await state.update_data(origin=origin, destination=destination)
    
    await callback.message.answer(
        f"üìç *–ú–∞—Ä—à—Ä—É—Ç:* {origin} ‚Üí {destination}\n\n"
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=quick_time_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "custom_route")
async def custom_route_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    await callback.message.answer("üìç *–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å:*", parse_mode="Markdown")
    await state.set_state(Trips.origin)
    await callback.answer()


@router.callback_query(F.data.startswith("quick_time:"))
async def quick_time_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π callback_data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Full callback_data: {callback.data}")
    
    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ callback_data
    parts = callback.data.split(":")
    if len(parts) >= 3:
        time_str = f"{parts[1]}:{parts[2]}"
    else:
        time_str = parts[1] if len(parts) > 1 else ""
    
    logger.info(f"Extracted time_str: '{time_str}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
    if not time_str or ":" not in time_str:
        logger.error(f"Invalid time format: '{time_str}'")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ "–∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º"
        if time_str == "07:00":
            # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –∑–∞–≤—Ç—Ä–∞ –≤ 7:00
            tomorrow = datetime.now() + timedelta(days=1)
            departure_datetime = tomorrow.replace(hour=7, minute=0, second=0, microsecond=0)
            await state.update_data(departure_time=departure_datetime)
            logger.info(f"Set departure time for tomorrow morning: {departure_datetime}")
        else:
            # –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
            departure_time = datetime.strptime(time_str, "%H:%M").time()
            # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now()
            departure_datetime = today.replace(hour=departure_time.hour, minute=departure_time.minute, second=0, microsecond=0)
            await state.update_data(departure_time=departure_datetime)
            logger.info(f"Successfully parsed time: {departure_datetime}")
        
        await callback.message.answer(
            "*–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):*", 
            parse_mode="Markdown",
            reply_markup=skip_description_keyboard()
        )
        await state.set_state(Trips.description)
        await callback.answer()
    except ValueError as e:
        logger.error(f"Error parsing time: '{time_str}', error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏")


@router.callback_query(F.data == "custom_time")
async def custom_time_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    await callback.message.answer("üìÖ *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ß–ß:–ú–ú):*", parse_mode="Markdown")
    await state.set_state(Trips.departure_time)
    await callback.answer()


@router.message(StateFilter(Trips.origin))
async def trip_origin(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    logger.info(f"User {message.from_user.id} entered trip origin: {message.text}")
    await state.update_data(origin=message.text)
    await message.answer("üèÅ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –ø–æ–µ–∑–¥–∫–∏:*", parse_mode="Markdown")
    await state.set_state(Trips.destination)


@router.message(StateFilter(Trips.destination))
async def trip_destination(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    logger.info(f"User {message.from_user.id} entered trip destination: {message.text}")
    await state.update_data(destination=message.text)
    await message.answer(
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=quick_time_keyboard()
    )


@router.message(StateFilter(Trips.departure_time))
async def trip_departure_time(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        departure_time = datetime.strptime(message.text, "%H:%M").time()
        
        # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now()
        departure_datetime = today.replace(hour=departure_time.hour, minute=departure_time.minute, second=0, microsecond=0)
        
        logger.info(f"User {message.from_user.id} entered trip departure time: {departure_datetime}")
        await state.update_data(departure_time=departure_datetime)
        await message.answer(
            "*–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):*", 
            parse_mode="Markdown",
            reply_markup=skip_description_keyboard()
        )
        await state.set_state(Trips.description)
    except ValueError:
        logger.warning(f"User {message.from_user.id} entered invalid time format: {message.text}")
        await message.answer("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú).*", parse_mode="Markdown")


@router.callback_query(F.data == "skip_description")
@db_session
async def skip_description(callback: types.CallbackQuery, state: FSMContext, session):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫—É –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    trip = create_trip(
        session,
        user_id=callback.from_user.id,
        origin=data['origin'],
        destination=data['destination'],
        departure_time=data['departure_time'],
        seats_available=None,
        price_per_seat=None,
        description=""
    )
    
    logger.info(f"Trip created successfully for user {callback.from_user.id} without description")
    
    await callback.message.answer("‚úÖ –ü–æ–µ–∑–¥–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", reply_markup=keyboards_main_menu())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    text = (f"*–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞!*\n\n"
            f"üìç *–ú–∞—Ä—à—Ä—É—Ç:* {trip.origin} ‚Üí {trip.destination}\n"
            f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {trip.departure_time.strftime('%d.%m.%Y %H:%M')}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ –≤ –≥—Ä—É–ø–ø—É
    await callback.bot.send_message(
        GROUP_ID,
        text,
        parse_mode="Markdown",
        reply_markup=keyboards_driver(trip.user_id, trip.id)
    )
    await callback.bot.send_message(
        GROUP_ID_ALL,
        text,
        parse_mode="Markdown",
        reply_markup=keyboards_driver(trip.user_id, trip.id)
    )
    
    await state.clear()
    await callback.answer()


@router.message(StateFilter(Trips.description))
@db_session
async def finalize_trip_creation(message: types.Message, state: FSMContext, session):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    data = await state.get_data()
    # logger.info(f"User {message.from_user.id} completed trip details: {data}")
    logger.info(f"User {message.from_user.id} entered description: {message.text}")
    description = message.text.strip()
    # –°–æ–∑–¥–∞–µ–º –ø–æ–µ–∑–¥–∫—É —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    trip = create_trip(
        session,
        user_id=message.from_user.id,
        origin=data['origin'],
        destination=data['destination'],
        departure_time=data['departure_time'],
        seats_available=None,  # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
        price_per_seat=None,   # –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É
        description=description  # –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ None, –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ None
    )
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    logger.info(f"Trip created successfully for user {message.from_user.id}")
    # keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É', callback_data=f"cancel_trip:{trip.id}")]])
    # await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)
    await message.answer("–ü–æ–µ–∑–¥–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!", reply_markup=keyboards_main_menu())
    print(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {trip.user_id, trip.id}")
    text=( f"*–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞!*\n\n"
        f"üìç *–ú–∞—Ä—à—Ä—É—Ç:* {trip.origin} ‚Üí {trip.destination}\n"
        f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {trip.departure_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"{f'üìù*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:* {trip.description}' if trip.description else ''}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–µ–∑–¥–∫–µ –≤ –≥—Ä—É–ø–ø—É
    await message.bot.send_message(
        GROUP_ID,
        text,
        parse_mode="Markdown",
        reply_markup=keyboards_driver(trip.user_id, trip.id)  # –ë–µ–∑ —É—á–µ—Ç–∞ –º–µ—Å—Ç
    )
    await message.bot.send_message(
        GROUP_ID_ALL,
        text,
        parse_mode="Markdown",
        reply_markup=keyboards_driver(trip.user_id, trip.id)  # –ë–µ–∑ —É—á–µ—Ç–∞ –º–µ—Å—Ç
    )
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


@router.callback_query(F.data.startswith("book_trip:"))
@db_session
async def book_trip(callback: types.CallbackQuery, session):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ trip_id –∏–∑ callback_data
    user_id, trip_id = map(int, callback.data.split(":")[1:])

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–µ–∑–¥–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    trip = session.query(Trip).filter_by(id=trip_id).first()
    if not trip:
        await callback.answer("–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–µ–∑–¥–∫–∏ {trip.user_id, trip.id}")
    book_trip_in_db(session, user_id, trip_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
    passenger_name = callback.from_user.full_name or "–ò–º—è —Å–∫—Ä—ã—Ç–æ"
    passenger_username = callback.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    driver_message = (
        f"üì¨ *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–µ–∑–¥–∫—É!*\n\n"
        f"üë§ *–ò–º—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞:* {passenger_name}\n"
        f"üìá *Username:* @{passenger_username}\n"
        f"üìç *–ú–∞—Ä—à—Ä—É—Ç:* {trip.origin} ‚Üí {trip.destination}\n"
        f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {trip.departure_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )

    try:
        await callback.bot.send_message(chat_id=trip.user_id, text=driver_message, parse_mode="Markdown")
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤–æ–¥–∏—Ç–µ–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("view_trip_"))
@db_session
async def view_trip(callback: types.CallbackQuery, session):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø–æ–µ–∑–¥–∫–µ
    trip_id = int(callback.data.split("_")[2])
    trip = session.query(Trip).filter_by(id=trip_id).first()
    if not trip:
        await callback.answer("–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ
    trip_message = (
        f"üìç *–ú–∞—Ä—à—Ä—É—Ç:* {trip.origin} ‚Üí {trip.destination}\n"
        f"‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {trip.departure_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"{f'üìù*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:* {trip.description}' if trip.description else ''}"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–•–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
    keyboard = keyboards_driver(callback.from_user.id, trip.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.answer(trip_message, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data == "search_trips")
@db_session
async def search_trips(callback: types.CallbackQuery, session):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
    trips = session.query(Trip).filter_by(status='active').all()

    if not trips:
        await callback.message.answer("üìÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for trip in trips:
        trip_info = f"{trip.origin} ‚Üí {trip.destination} | {trip.departure_time.strftime('%d.%m.%Y %H:%M')}"
        button = InlineKeyboardButton(text=trip_info, callback_data=f"view_trip_{trip.id}")
        keyboard.inline_keyboard.append([button])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–µ–∑–¥–∫–∞–º–∏
    await callback.message.answer("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É:*", parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data.startswith("cancel_trip:"))
@db_session
async def cancel_trip(callback: types.CallbackQuery, session):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if callback.message.chat.type != "private":
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º")
        return
    
    trip_id = int(callback.data.split(":")[1])
    trip = session.query(Trip).filter_by(id=trip_id).first()

    if not trip:
        await callback.answer("–ü–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ 'cancelled'
    trip.status = "cancelled"
    session.commit()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–µ–∑–¥–∫–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    try:
        await callback.bot.delete_message(chat_id=GROUP_ID, message_id=trip.group_message_id)
        await callback.bot.delete_message(chat_id=GROUP_ID_ALL, message_id=trip.group_message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–∞
    booked_users = get_users_who_booked_trip(session, trip_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–µ–∑–¥–∫—É

    for user in booked_users:
        try:
            await callback.bot.send_message(
                user.telegram_id,
                f"üö® *–í–Ω–∏–º–∞–Ω–∏–µ!* –ü–æ–µ–∑–¥–∫–∞ {trip.origin} ‚Üí {trip.destination} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {callback.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª(–∞) –ø–æ–µ–∑–¥–∫—É.\n"
                f"üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ–µ–∑–¥–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")

    await callback.answer("–ü–æ–µ–∑–¥–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")


async def send_promo_every_4_days(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∂–¥—ã–µ 4 –¥–Ω—è –≤ 10:00
    """
    while True:
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ (–∫–∞–∂–¥—ã–µ 4 –¥–Ω—è –≤ 10:00)
        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –º–µ–Ω—å—à–µ 10:00, —Ç–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ 10:00
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10:00, —Ç–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 4 –¥–Ω—è –≤ 10:00
        if now.hour < 10:
            next_post_time = now.replace(hour=10, minute=0, second=0, microsecond=0)
        else:
            next_post_time = now.replace(hour=10, minute=0, second=0, microsecond=0) + timedelta(days=4)
        
        wait_seconds = (next_post_time - now).total_seconds()
        
        await asyncio.sleep(wait_seconds)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url="https://t.me/num_po_puti_bot")]
            ]
        )
        
        # promo_message = (
        #     "üöó –•–æ—á–µ—à—å –±–æ–ª—å—à–µ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤? –ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É!\n"
        #     "üëã –¢—ã —É–∂–µ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–æ–π ¬´–ù–∞–º –ø–æ –ø—É—Ç–∏¬ª –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ c –°—É–≤–æ—Ä–æ–≤—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ? –û—Ç–ª–∏—á–Ω–æ!\n\n"
        #     "üîπ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É ‚Äî ¬´–ù–∞–º –ø–æ –ø—É—Ç–∏ | –í—Å–µ —Ä–∞–π–æ–Ω—ã¬ª!\n"
        #     "‚úÖ –ë–æ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ‚Äî –Ω–µ —Ç–æ–ª—å–∫–æ –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π, –Ω–æ –∏ –ª—é–±—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        #     "‚úÖ –ï—â–µ –±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ ‚Äî –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–∞\n"
        #     "‚úÖ –ì–∏–±–∫–æ—Å—Ç—å ‚Äî –ø–æ–µ–∑–¥–∫–∏ –º–µ–∂–¥—É –ª—é–±—ã–º–∏ —Ä–∞–π–æ–Ω–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        #     "‚úÖ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
        #     "üëâ –ü–µ—Ä–µ—Ö–æ–¥–∏ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è: @num_po_puti\n\n"
        #     "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Å–µ–±—è –æ–¥–Ω–∏–º —Ä–∞–π–æ–Ω–æ–º ‚Äî –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–π –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É –¥–µ—à–µ–≤–æ –∏ —É–¥–æ–±–Ω–æ!"
        # )
        
        promo_message = (
            "üöó *–ù–∞–º –ø–æ –ø—É—Ç–∏ - –ë–æ—Ç –¥–ª—è –ø–æ–ø—É—Ç—á–∏–∫–æ–≤!*\n\n"
            "üëã *–ù–∞—Ö–æ–¥–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∑–∞ 2 –∫–ª–∏–∫–∞!*\n\n"
            "‚ú® *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è: —á–µ—Ä–µ–∑ 30 –º–∏–Ω, 1 —á–∞—Å, 2 —á–∞—Å–∞\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "üí° *–≠–∫–æ–Ω–æ–º—å –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫–∞—Ö!*\n\n"
            "üöÄ *–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
            await bot.send_message(
                chat_id="@suvorovskynam",
                text=promo_message,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            if GROUP_ID_ALL:
                try:
                    await bot.send_message(
                        chat_id=GROUP_ID_ALL,
                        text=promo_message,
                        parse_mode="Markdown",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"Error sending promo message to GROUP_ID_ALL: {e}")
            
            logger.info("Promo message sent successfully (every 4 days)")
        except Exception as e:
            logger.error(f"Error sending promo message: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def start_scheduler(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 4 –¥–Ω—è
    """
    asyncio.create_task(send_promo_every_4_days(bot))


@router.message(Command(commands=["promo"]))
async def send_manual_promo(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID)
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    promo_message = (
        "üöó *–ù–∞–º –ø–æ –ø—É—Ç–∏ - –ë–æ—Ç –¥–ª—è –ø–æ–ø—É—Ç—á–∏–∫–æ–≤!*\n\n"
        "üëã *–ù–∞—Ö–æ–¥–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∑–∞ 2 –∫–ª–∏–∫–∞!*\n\n"
        "‚ú® *–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:*\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –∏–º—è)\n"
        "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: –°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π ‚Üî –¶–µ–Ω—Ç—Ä, –ê—ç—Ä–æ–ø–æ—Ä—Ç, –í–æ–∫–∑–∞–ª\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è: —á–µ—Ä–µ–∑ 30 –º–∏–Ω, 1 —á–∞—Å, 2 —á–∞—Å–∞\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "üí° *–≠–∫–æ–Ω–æ–º—å –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–µ–∑–¥–∫–∞—Ö!*\n\n"
        "üöÄ *–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞", url="https://t.me/num_po_puti_bot")]
        ]
    )
    
    try:
        await message.answer(
            text=promo_message,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await message.answer("‚úÖ –ü—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"Error sending manual promo message: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è.")
